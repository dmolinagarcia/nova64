  Wed Feb 15 2023 11:26                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C816 Macro Assembler   **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;===============================================================================
     2                        ; __        ____  ____   ____ ___  _  __  ______  ______  
     3                        ; \ \      / / /_| ___| / ___( _ )/ |/ /_/ ___\ \/ / __ ) 
     4                        ;  \ \ /\ / / '_ \___ \| |   / _ \| | '_ \___ \\  /|  _ \ 
     5                        ;   \ V  V /| (_) |__) | |__| (_) | | (_) |__) /  \| |_) |
     6                        ;  __\_/\_/  \___/____/ \____\___/|_|\___/____/_/\_\____/ 
     7                        ; | __ )  ___   ___ | |_   / ___|___   __| | ___          
     8                        ; |  _ \ / _ \ / _ \| __| | |   / _ \ / _` |/ _ \         
     9                        ; | |_) | (_) | (_) | |_  | |__| (_) | (_| |  __/         
    10                        ; |____/ \___/ \___/ \__|  \____\___/ \__,_|\___|         
    11                        ;
    12                        ; W65C816SXB C Runtime Startup Module (Small Model)
    13                        ;-------------------------------------------------------------------------------
    14                        ; Copyright (C)2019 Andrew Jacobs.
    15                        ; All rights reserved.
    16                        ;
    17                        ; This work is made available under the terms of the Creative Commons
    18                        ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
    19                        ; following URL to see the details.
    20                        ;
    21                        ; http://creativecommons.org/licenses/by-nc-sa/4.0/
    22                        ;
    23                        ;===============================================================================
    24                        ; Notes
    25                        ;
    26                        ; This code is based on the sample code in the Assembler/Linker manual and the
    27                        ; examples provided by WDC for the W65C816SXB board.
    28                        ;-------------------------------------------------------------------------------
    29                        
    30                        		chip	65816
    31                        
    32                        		include "w65c816.inc"
    33                        		
    34                        ;===============================================================================
    35                        ; Stack Area
    36                        ;-------------------------------------------------------------------------------
    37                        
    38                        STACK		section
    39                        
    40 00:0000:              		ds	512		; Reserve 512 bytes for the stack
    41                        		
    42 00:0200:              		ends
    43                        		
    44                        ;===============================================================================
    45                        ; Reset Handler
    46                        ;-------------------------------------------------------------------------------
    47                        
    48                        		code
    49                        
    50                        		xref	__main
    51                        		xref	_BEG_DATA
    52                        		xref	_END_DATA
  Wed Feb 15 2023 11:26                                                                                                    Page 2


    53                        		xref	_ROM_BEG_DATA
    54                        		xref	_BEG_UDATA
    55                        		xref	_END_UDATA
    56                        		xref	_BEG_STACK
    57                        		xref	_END_STACK
    58                        
    59                        		longa	off
    60                        		longi	off
    61                        RESET:
    62 00:0000: 78           		sei				; Reset flags
    63 00:0001: D8           		cld
    64                        		native				; Go native
+   64 00:0002: 18           		clc
+   64 00:0003: FB           		xce
    65                        
    66                        		long_ai				; Set stack
+   66 00:0004: C2 30        		rep	#M_FLAG|X_FLAG
+   66                        		longa	on
+   66                        		longi	on
    67 00:0006: A2 xx xx     		ldx	#_END_STACK-1
    68 00:0009: 9A           		txs
    69                        
    70 00:000A: A9 xx xx     		lda	#_END_DATA-_BEG_DATA	; Any initialised data?
    71 00:000D: F0 0A        		beq	NoConstData
    72 00:000F: 3A           		dec	a			; Yes, copy into RAM
    73 00:0010: A2 xx xx     		ldx	#_ROM_BEG_DATA
    74 00:0013: A0 xx xx     		ldy	#_BEG_DATA
    75 00:0016: 54 xx xx     		mvn	^_ROM_BEG_DATA,^_BEG_DATA
    76                        NoConstData:
    77                        
    78                        		short_a
+   78 00:0019: E2 20        		sep	#M_FLAG
+   78                        		longa	off
    79 00:001B: A9 xx        		lda	#^_BEG_DATA		; Ensure data bank selected
    80 00:001D: 48           		pha
    81 00:001E: AB           		plb
    82                        
    83 00:001F: A2 xx xx     		ldx	#_END_UDATA-_BEG_UDATA	; Any uninitialise data?
    84 00:0022: F0 06        		beq	NoData
    85 00:0024: CA           ClearData:	dex				; Yes, clear it
    86 00:0025: 9E xx xx     		stz	!_BEG_UDATA,x
    87 00:0028: D0 FA        		bne	ClearData
    88                        NoData:
    89                        
    90                        		long_a				; Start the main application
+   90 00:002A: C2 20        		rep	#M_FLAG
+   90                        		longa	on
    91 00:002C: F4 00 00     		pea	0
    92 00:002F: F4 00 00     		pea	0
    93 00:0032: F4 00 00     		pea	0
    94 00:0035: 4C xx xx     		jmp	__main
    95                        		
    96                        ;===============================================================================
    97                        ; Vectors
    98                        ;-------------------------------------------------------------------------------
    99                        		
   100                        BadVector:
   101 00:0038: DB           		stp
  Wed Feb 15 2023 11:26                                                                                                    Page 3


   102 00:0039: 80 FD        		bra	BadVector
   103                        		
   104                        		xref	__IRQHandler
   105                        		
   106                        SHADOW		section offset $7ee0
   107                        
   108 00:7EE0: 00 00        		dw	0		; Native Mode Vectors
   109 00:7EE2: 00 00        		dw	0
   110 00:7EE4: xx xx        		dw	BadVector	; COP
   111 00:7EE6: xx xx        		dw	BadVector	; BRK
   112 00:7EE8: xx xx        		dw	BadVector	; ABORT
   113 00:7EEA: xx xx        		dw	BadVector	; NMI
   114 00:7EEC: 00 00        		dw	0
   115 00:7EEE: xx xx        		dw	BadVector	; IRQ
   116                        
   117 00:7EF0: 00 00        		dw	0		; Emulation Mode Vectors
   118 00:7EF2: 00 00        		dw	0
   119 00:7EF4: xx xx        		dw	BadVector	; COP
   120 00:7EF6: 00 00        		dw	0
   121 00:7EF8: xx xx        		dw	BadVector	; ABORT
   122 00:7EFA: xx xx        		dw	BadVector	; NMI
   123 00:7EFC: xx xx        		dw	RESET		; RESET
   124 00:7EFE: xx xx        		dw	BadVector	; IRQBRK
   125                        		
   126 00:7F00:              		ends
   127                        	
   128                        VECTORS		section	offset $ffe0
   129                        
   130 00:FFE0: 00 00        		dw	0		; Native Mode Vectors
   131 00:FFE2: 00 00        		dw	0
   132 00:FFE4: xx xx        		dw	BadVector	; COP
   133 00:FFE6: xx xx        		dw	BadVector	; BRK
   134 00:FFE8: xx xx        		dw	BadVector	; ABORT
   135 00:FFEA: xx xx        		dw	BadVector	; NMI
   136 00:FFEC: 00 00        		dw	0
   137 00:FFEE: xx xx        		dw	BadVector	; IRQ
   138                        
   139 00:FFF0: 00 00        		dw	0		; Emulation Mode Vectors
   140 00:FFF2: 00 00        		dw	0
   141 00:FFF4: xx xx        		dw	BadVector	; COP
   142 00:FFF6: 00 00        		dw	0
   143 00:FFF8: xx xx        		dw	BadVector	; ABORT
   144 00:FFFA: xx xx        		dw	BadVector	; NMI
   145 00:FFFC: xx xx        		dw	RESET		; RESET
   146 00:FFFE: xx xx        		dw	BadVector	; IRQBRK
   147                        
   148                        		end


      Lines assembled: 261
      Errors: 0
